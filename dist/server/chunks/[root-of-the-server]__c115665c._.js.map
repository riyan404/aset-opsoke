{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  // Memory optimization: Configure connection pooling\n  datasources: {\n    db: {\n      url: process.env.DATABASE_URL\n    }\n  },\n  // Reduce memory usage with optimized logging\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  // Connection pool optimization for memory efficiency\n  __internal: {\n    engine: {\n      // Limit connection pool size to reduce memory usage\n      connectionLimit: 5,\n    }\n  }\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY,CAAC;IAC/D,oDAAoD;IACpD,aAAa;QACX,IAAI;YACF,KAAK,QAAQ,GAAG,CAAC,YAAY;QAC/B;IACF;IACA,6CAA6C;IAC7C,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO,GAAG;IAC3E,qDAAqD;IACrD,YAAY;QACV,QAAQ;YACN,oDAAoD;YACpD,iBAAiB;QACnB;IACF;AACF;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport jwt from 'jsonwebtoken'\n\nexport interface AuthenticatedRequest extends NextRequest {\n  user?: {\n    id: string\n    email: string\n    role: string\n    department?: string\n  }\n}\n\nexport function verifyToken(token: string) {\n  try {\n    return jwt.verify(token, process.env.JWT_SECRET!)\n  } catch (error) {\n    return null\n  }\n}\n\nexport function generateToken(payload: any) {\n  return jwt.sign(payload, process.env.JWT_SECRET!, { expiresIn: '1d' })\n}\n\nexport function withAuth(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n  return async (req: AuthenticatedRequest, context?: any) => {\n    const authHeader = req.headers.get('authorization')\n    console.log('Middleware: Authorization header:', authHeader)\n    \n    const token = authHeader?.replace('Bearer ', '')\n    console.log('Middleware: Extracted token:', token ? 'Token exists' : 'No token')\n    \n    if (!token) {\n      console.log('Middleware: No token provided')\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token) as any\n    console.log('Middleware: Token verification result:', decoded ? 'Valid' : 'Invalid')\n    \n    if (!decoded) {\n      console.log('Middleware: Invalid token')\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    req.user = decoded\n    return handler(req, context)\n  }\n}\n\nexport function withRole(roles: string[]) {\n  return function(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n    return withAuth(async (req: AuthenticatedRequest, context?: any) => {\n      if (!req.user || !roles.includes(req.user.role)) {\n        return NextResponse.json({ error: 'Forbidden' }, { status: 403 })\n      }\n      return handler(req, context)\n    })\n  }\n}"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAWO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,OAAO,kJAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU;IACjD,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,cAAc,OAAY;IACxC,OAAO,kJAAG,CAAC,IAAI,CAAC,SAAS,QAAQ,GAAG,CAAC,UAAU,EAAG;QAAE,WAAW;IAAK;AACtE;AAEO,SAAS,SAAS,OAA4E;IACnG,OAAO,OAAO,KAA2B;QACvC,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;QACnC,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,MAAM,QAAQ,YAAY,QAAQ,WAAW;QAC7C,QAAQ,GAAG,CAAC,gCAAgC,QAAQ,iBAAiB;QAErE,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAU,YAAY;QAC5B,QAAQ,GAAG,CAAC,0CAA0C,UAAU,UAAU;QAE1E,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,IAAI,IAAI,GAAG;QACX,OAAO,QAAQ,KAAK;IACtB;AACF;AAEO,SAAS,SAAS,KAAe;IACtC,OAAO,SAAS,OAA4E;QAC1F,OAAO,SAAS,OAAO,KAA2B;YAChD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG;gBAC/C,OAAO,gJAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAY,GAAG;oBAAE,QAAQ;gBAAI;YACjE;YACA,OAAO,QAAQ,KAAK;QACtB;IACF;AACF","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/audit.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma'\n\nexport async function logActivity(\n  userId: string,\n  action: string,\n  resource: string,\n  resourceId?: string,\n  oldValues?: any,\n  newValues?: any,\n  ipAddress?: string,\n  userAgent?: string\n) {\n  try {\n    await prisma.auditLog.create({\n      data: {\n        userId,\n        action,\n        resource,\n        resourceId,\n        oldValues: oldValues ? JSON.stringify(oldValues) : null,\n        newValues: newValues ? JSON.stringify(newValues) : null,\n        ipAddress,\n        userAgent,\n      },\n    })\n  } catch (error) {\n    console.error('Failed to log activity:', error)\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,YACpB,MAAc,EACd,MAAc,EACd,QAAgB,EAChB,UAAmB,EACnB,SAAe,EACf,SAAe,EACf,SAAkB,EAClB,SAAkB;IAElB,IAAI;QACF,MAAM,gIAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3B,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA,WAAW,YAAY,KAAK,SAAS,CAAC,aAAa;gBACnD,WAAW,YAAY,KAAK,SAAS,CAAC,aAAa;gBACnD;gBACA;YACF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;IAC3C;AACF","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/permissions.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\nimport { CacheManager } from './cache'\n\nconst prisma = new PrismaClient()\n\nexport interface PermissionCheck {\n  canRead: boolean\n  canWrite: boolean\n  canDelete: boolean\n}\n\n/**\n * Check if a user has specific permissions for a module\n * @param userDepartment - User's department\n * @param userRole - User's role (ADMIN, USER, VIEWER)\n * @param module - System module to check (ASSETS, DOCUMENTS, DIGITAL_ASSETS, etc.)\n * @returns Permission object with read, write, delete flags\n */\nexport async function checkUserPermissions(\n  userDepartment: string | null,\n  userRole: string,\n  module: string\n): Promise<PermissionCheck> {\n  try {\n    // Admin has full access to everything\n    if (userRole === 'ADMIN') {\n      return {\n        canRead: true,\n        canWrite: true,\n        canDelete: true\n      }\n    }\n\n    // Users without department have limited access\n    if (!userDepartment) {\n      return {\n        canRead: true,\n        canWrite: false,\n        canDelete: false\n      }\n    }\n\n    // Temporarily disable cache to fix hang issue\n    // const cacheKey = CacheManager.generatePermissionKey(userDepartment, userRole, module)\n    // const cachedPermission = CacheManager.getPermissions(cacheKey)\n    \n    // if (cachedPermission) {\n    //   return cachedPermission\n    // }\n\n    // Get department permissions from database with timeout\n    const permissionPromise = prisma.departmentPermission.findFirst({\n      where: {\n        department: userDepartment,\n        module: module as any,\n        isActive: true\n      }\n    })\n\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Database query timeout')), 3000)\n    )\n\n    const permission = await Promise.race([permissionPromise, timeoutPromise]) as any\n\n    let result: PermissionCheck\n\n    if (!permission) {\n      // Default permissions if no specific permission is set\n      result = {\n        canRead: true, // Default read access\n        canWrite: false,\n        canDelete: false\n      }\n    } else {\n      result = {\n        canRead: permission.canRead,\n        canWrite: permission.canWrite,\n        canDelete: permission.canDelete\n      }\n    }\n\n    // Cache the result (temporarily disabled)\n    // CacheManager.setPermissions(cacheKey, result)\n\n    return result\n  } catch (error) {\n    console.error('Error checking user permissions:', error)\n    // Default to safe permissions on error\n    return {\n      canRead: true,\n      canWrite: false,\n      canDelete: false\n    }\n  }\n}\n\n/**\n * Check if user can read a specific module\n */\nexport async function canUserRead(userDepartment: string | null, userRole: string, module: string): Promise<boolean> {\n  const permissions = await checkUserPermissions(userDepartment, userRole, module)\n  return permissions.canRead\n}\n\n/**\n * Check if user can write/edit in a specific module\n */\nexport async function canUserWrite(userDepartment: string | null, userRole: string, module: string): Promise<boolean> {\n  const permissions = await checkUserPermissions(userDepartment, userRole, module)\n  return permissions.canWrite\n}\n\n/**\n * Check if user can delete in a specific module\n */\nexport async function canUserDelete(userDepartment: string | null, userRole: string, module: string): Promise<boolean> {\n  const permissions = await checkUserPermissions(userDepartment, userRole, module)\n  return permissions.canDelete\n}\n\n/**\n * Get all permissions for a department\n */\nexport async function getDepartmentPermissions(department: string) {\n  try {\n    const permissions = await prisma.departmentPermission.findMany({\n      where: {\n        department,\n        isActive: true\n      },\n      orderBy: {\n        module: 'asc'\n      }\n    })\n\n    // Convert to a map for easy lookup\n    const permissionMap: { [key: string]: PermissionCheck } = {}\n    permissions.forEach(perm => {\n      permissionMap[perm.module] = {\n        canRead: perm.canRead,\n        canWrite: perm.canWrite,\n        canDelete: perm.canDelete\n      }\n    })\n\n    return permissionMap\n  } catch (error) {\n    console.error('Error getting department permissions:', error)\n    return {}\n  }\n}\n\n/**\n * Create middleware function for API route protection\n */\nexport function withPermissionCheck(requiredModule: string, requiredAction: 'read' | 'write' | 'delete') {\n  return function (handler: Function) {\n    return async function (request: any, context?: any) {\n      try {\n        // Extract user from request (assuming JWT verification is done)\n        const user = (request as any).user\n        \n        if (!user) {\n          return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n            status: 401,\n            headers: { 'Content-Type': 'application/json' }\n          })\n        }\n\n        // Check permissions\n        const permissions = await checkUserPermissions(user.department, user.role, requiredModule)\n        \n        let hasPermission = false\n        switch (requiredAction) {\n          case 'read':\n            hasPermission = permissions.canRead\n            break\n          case 'write':\n            hasPermission = permissions.canWrite\n            break\n          case 'delete':\n            hasPermission = permissions.canDelete\n            break\n        }\n\n        if (!hasPermission) {\n          return new Response(JSON.stringify({ error: 'Insufficient permissions' }), {\n            status: 403,\n            headers: { 'Content-Type': 'application/json' }\n          })\n        }\n\n        // Call the original handler\n        return await handler(request, context)\n      } catch (error) {\n        console.error('Permission check error:', error)\n        return new Response(JSON.stringify({ error: 'Internal server error' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n    }\n  }\n}\n\n/**\n * System modules constants\n */\nexport const SYSTEM_MODULES = {\n  ASSETS: 'ASSETS',\n  DOCUMENTS: 'DOCUMENTS',\n  DIGITAL_ASSETS: 'DIGITAL_ASSETS',\n  USERS: 'USERS',\n  AUDIT_LOGS: 'AUDIT_LOGS',\n  REPORTS: 'REPORTS',\n  SETTINGS: 'SETTINGS'\n} as const"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/app/api/digital-assets/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { withAuth, withRole } from '@/lib/middleware'\nimport { logActivity } from '@/lib/audit'\nimport { checkUserPermissions, SYSTEM_MODULES } from '@/lib/permissions'\nimport { CacheManager } from '@/lib/cache'\n\n// GET /api/digital-assets - List all digital assets with filtering\nexport const GET = withAuth(async (request: NextRequest) => {\n  try {\n    const user = (request as any).user\n\n    const { searchParams } = new URL(request.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '12')\n    const search = searchParams.get('search') || ''\n    const aspectRatio = searchParams.get('aspectRatio') || ''\n    const department = searchParams.get('department') || ''\n\n    // Temporarily disable cache to fix loading issue\n    // const cacheKey = `digital-assets:${user.id}:${page}:${limit}:${search}:${aspectRatio}:${department}`\n    // const cachedResult = CacheManager.getDigitalAssets(cacheKey)\n    // if (cachedResult) {\n    //   const response = NextResponse.json(cachedResult)\n    //   response.headers.set('Cache-Control', 'public, max-age=300, s-maxage=600, stale-while-revalidate=86400')\n    //   response.headers.set('ETag', `\"${Buffer.from(cacheKey).toString('base64')}\"`)\n    //   response.headers.set('Vary', 'Accept-Encoding')\n    //   response.headers.set('X-Cache-Status', 'HIT')\n    //   return response\n    // }\n\n    // Check permissions with timeout\n    const permissionPromise = checkUserPermissions(\n      user.department,\n      user.role,\n      SYSTEM_MODULES.DIGITAL_ASSETS\n    )\n    \n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Permission check timeout')), 5000)\n    )\n    \n    const permissions = await Promise.race([permissionPromise, timeoutPromise]) as any\n\n    if (!permissions.canRead) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })\n    }\n\n    const skip = (page - 1) * limit\n\n    // Build where clause\n    const where: any = {\n      isActive: true,\n    }\n\n    // Add search filter\n    if (search) {\n      where.OR = [\n        { contentName: { contains: search } },\n        { description: { contains: search } },\n        { tags: { contains: search } },\n      ]\n    }\n\n    // Add aspect ratio filter\n    if (aspectRatio) {\n      where.aspectRatio = aspectRatio\n    }\n\n    // Optional department filter (available for all users)\n    if (department && department !== 'all') {\n      where.department = department\n    }\n\n    // Optimize query by selecting only necessary fields and get total count\n    const [digitalAssets, total] = await Promise.all([\n      prisma.digitalAsset.findMany({\n        where,\n        select: {\n          id: true,\n          contentName: true,\n          description: true,\n          // Always load preview files for all pages\n          previewFile: true,\n          previewFileName: true,\n          previewFileSize: true,\n          aspectRatio: true,\n          googleDriveLink: true,\n          tags: true,\n          department: true,\n          createdAt: true,\n          updatedAt: true,\n          createdBy: {\n            select: {\n              firstName: true,\n              lastName: true,\n            },\n          },\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip,\n        take: limit,\n      }),\n      prisma.digitalAsset.count({ where })\n    ])\n\n    const result = {\n      digitalAssets,\n      pagination: {\n        page,\n        pages: Math.ceil(total / limit),\n        total,\n        limit,\n      },\n    }\n\n    // Cache the result with enhanced caching (temporarily disabled)\n    // CacheManager.setDigitalAssets(cacheKey, result)\n\n    // Return with optimized cache headers\n    const response = NextResponse.json(result)\n    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')\n    response.headers.set('Pragma', 'no-cache')\n    response.headers.set('Expires', '0')\n    return response\n  } catch (error) {\n    console.error('Failed to fetch digital assets:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch digital assets' },\n      { status: 500 }\n    )\n  }\n})\n\n// POST /api/digital-assets - Create new digital asset\nexport const POST = withAuth(async (request: NextRequest) => {\n  try {\n    const user = (request as any).user\n\n    // Check if user can create digital assets\n    const permissions = await checkUserPermissions(user.department, user.role, SYSTEM_MODULES.DIGITAL_ASSETS)\n    if (!permissions.canWrite) {\n      return NextResponse.json(\n        { error: 'You do not have permission to create digital assets' },\n        { status: 403 }\n      )\n    }\n\n    const contentType = request.headers.get('content-type')\n    let data: any\n    let previewFileBuffer: string | null = null\n    let previewFileName: string | null = null\n    let previewFileSize: number | null = null\n\n    if (contentType?.includes('multipart/form-data')) {\n      // Handle FormData (with file upload)\n      const formData = await request.formData()\n      const previewFile = formData.get('previewFile') as File | null\n      \n      data = {\n        contentName: formData.get('contentName') as string,\n        description: formData.get('description') as string,\n        aspectRatio: formData.get('aspectRatio') as string,\n        googleDriveLink: formData.get('googleDriveLink') as string,\n        tags: formData.get('tags') as string,\n        department: formData.get('department') as string,\n      }\n\n      // Process uploaded file if present\n      if (previewFile && previewFile.size > 0) {\n        // Convert file to base64 for storage\n        const bytes = await previewFile.arrayBuffer()\n        const buffer = Buffer.from(bytes)\n        previewFileBuffer = buffer.toString('base64')\n        previewFileName = previewFile.name\n        previewFileSize = previewFile.size\n      }\n    } else {\n      // Handle JSON data (legacy support)\n      data = await request.json()\n      previewFileBuffer = data.previewFile\n      previewFileName = data.previewFileName\n      previewFileSize = data.previewFileSize\n    }\n\n    const {\n      contentName,\n      description,\n      aspectRatio,\n      googleDriveLink,\n      tags,\n      department,\n    } = data\n\n    // Validate required fields\n    if (!contentName || !aspectRatio) {\n      return NextResponse.json(\n        { error: 'Content name and aspect ratio are required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate aspect ratio\n    if (!['RATIO_4_3', 'RATIO_9_16'].includes(aspectRatio)) {\n      return NextResponse.json(\n        { error: 'Invalid aspect ratio. Must be RATIO_4_3 or RATIO_9_16' },\n        { status: 400 }\n      )\n    }\n\n    // Create digital asset\n    const digitalAsset = await prisma.digitalAsset.create({\n      data: {\n        contentName,\n        description,\n        aspectRatio,\n        googleDriveLink,\n        previewFile: previewFileBuffer,\n        previewFileName,\n        previewFileSize,\n        tags,\n        department: department || user.department || 'Digital', // Default to 'Digital' if no department\n        createdById: user.id,\n        updatedById: user.id,\n      },\n      include: {\n        createdBy: {\n          select: {\n            id: true,\n            firstName: true,\n            lastName: true,\n            email: true,\n          },\n        },\n        updatedBy: {\n          select: {\n            id: true,\n            firstName: true,\n            lastName: true,\n            email: true,\n          },\n        },\n      },\n    })\n\n    // Log activity\n    const ipAddress = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     'unknown'\n    \n    await logActivity(\n      user.id,\n      'CREATE_DIGITAL_ASSET',\n      'DigitalAsset',\n      digitalAsset.id,\n      null,\n      digitalAsset,\n      ipAddress,\n      request.headers.get('user-agent') || 'unknown'\n    )\n\n    return NextResponse.json({ digitalAsset }, { status: 201 })\n  } catch (error) {\n    console.error('Failed to create digital asset:', error)\n    return NextResponse.json(\n      { error: 'Failed to create digital asset' },\n      { status: 500 }\n    )\n  }\n})"],"names":[],"mappings":"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","debugId":null}}]
}