{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  // Memory optimization: Configure connection pooling\n  datasources: {\n    db: {\n      url: process.env.DATABASE_URL\n    }\n  },\n  // Reduce memory usage with optimized logging\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  // Connection pool optimization for memory efficiency\n  __internal: {\n    engine: {\n      // Limit connection pool size to reduce memory usage\n      connectionLimit: 5,\n    }\n  }\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY,CAAC;IAC/D,oDAAoD;IACpD,aAAa;QACX,IAAI;YACF,KAAK,QAAQ,GAAG,CAAC,YAAY;QAC/B;IACF;IACA,6CAA6C;IAC7C,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO,GAAG;IAC3E,qDAAqD;IACrD,YAAY;QACV,QAAQ;YACN,oDAAoD;YACpD,iBAAiB;QACnB;IACF;AACF;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/auth.ts"],"sourcesContent":["import bcrypt from 'bcryptjs'\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12)\n}\n\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword)\n}"],"names":[],"mappings":";;;;;;AAAA;;AAEO,eAAe,aAAa,QAAgB;IACjD,OAAO,8IAAM,CAAC,IAAI,CAAC,UAAU;AAC/B;AAEO,eAAe,eAAe,QAAgB,EAAE,cAAsB;IAC3E,OAAO,8IAAM,CAAC,OAAO,CAAC,UAAU;AAClC","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport jwt from 'jsonwebtoken'\n\nexport interface AuthenticatedRequest extends NextRequest {\n  user?: {\n    id: string\n    email: string\n    role: string\n    department?: string\n  }\n}\n\nexport function verifyToken(token: string) {\n  try {\n    return jwt.verify(token, process.env.JWT_SECRET!)\n  } catch (error) {\n    return null\n  }\n}\n\nexport function generateToken(payload: any) {\n  return jwt.sign(payload, process.env.JWT_SECRET!, { expiresIn: '1d' })\n}\n\nexport function withAuth(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n  return async (req: AuthenticatedRequest, context?: any) => {\n    const authHeader = req.headers.get('authorization')\n    console.log('Middleware: Authorization header:', authHeader)\n    \n    const token = authHeader?.replace('Bearer ', '')\n    console.log('Middleware: Extracted token:', token ? 'Token exists' : 'No token')\n    \n    if (!token) {\n      console.log('Middleware: No token provided')\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token) as any\n    console.log('Middleware: Token verification result:', decoded ? 'Valid' : 'Invalid')\n    \n    if (!decoded) {\n      console.log('Middleware: Invalid token')\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    req.user = decoded\n    return handler(req, context)\n  }\n}\n\nexport function withRole(roles: string[]) {\n  return function(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n    return withAuth(async (req: AuthenticatedRequest, context?: any) => {\n      if (!req.user || !roles.includes(req.user.role)) {\n        return NextResponse.json({ error: 'Forbidden' }, { status: 403 })\n      }\n      return handler(req, context)\n    })\n  }\n}"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAWO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,OAAO,kJAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU;IACjD,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,cAAc,OAAY;IACxC,OAAO,kJAAG,CAAC,IAAI,CAAC,SAAS,QAAQ,GAAG,CAAC,UAAU,EAAG;QAAE,WAAW;IAAK;AACtE;AAEO,SAAS,SAAS,OAA4E;IACnG,OAAO,OAAO,KAA2B;QACvC,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;QACnC,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,MAAM,QAAQ,YAAY,QAAQ,WAAW;QAC7C,QAAQ,GAAG,CAAC,gCAAgC,QAAQ,iBAAiB;QAErE,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAU,YAAY;QAC5B,QAAQ,GAAG,CAAC,0CAA0C,UAAU,UAAU;QAE1E,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,IAAI,IAAI,GAAG;QACX,OAAO,QAAQ,KAAK;IACtB;AACF;AAEO,SAAS,SAAS,KAAe;IACtC,OAAO,SAAS,OAA4E;QAC1F,OAAO,SAAS,OAAO,KAA2B;YAChD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG;gBAC/C,OAAO,gJAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAY,GAAG;oBAAE,QAAQ;gBAAI;YACjE;YACA,OAAO,QAAQ,KAAK;QACtB;IACF;AACF","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/audit.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma'\n\nexport async function logActivity(\n  userId: string,\n  action: string,\n  resource: string,\n  resourceId?: string,\n  oldValues?: any,\n  newValues?: any,\n  ipAddress?: string,\n  userAgent?: string\n) {\n  try {\n    await prisma.auditLog.create({\n      data: {\n        userId,\n        action,\n        resource,\n        resourceId,\n        oldValues: oldValues ? JSON.stringify(oldValues) : null,\n        newValues: newValues ? JSON.stringify(newValues) : null,\n        ipAddress,\n        userAgent,\n      },\n    })\n  } catch (error) {\n    console.error('Failed to log activity:', error)\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,YACpB,MAAc,EACd,MAAc,EACd,QAAgB,EAChB,UAAmB,EACnB,SAAe,EACf,SAAe,EACf,SAAkB,EAClB,SAAkB;IAElB,IAAI;QACF,MAAM,gIAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3B,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA,WAAW,YAAY,KAAK,SAAS,CAAC,aAAa;gBACnD,WAAW,YAAY,KAAK,SAAS,CAAC,aAAa;gBACnD;gBACA;YACF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;IAC3C;AACF","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyPassword } from '@/lib/auth'\nimport { generateToken } from '@/lib/middleware'\nimport { logActivity } from '@/lib/audit'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json()\n\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'Email and password are required' },\n        { status: 400 }\n      )\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: { email },\n    })\n\n    if (!user || !user.isActive) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      )\n    }\n\n    // Verify password\n    const isValidPassword = await verifyPassword(password, user.password)\n\n    if (!isValidPassword) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      )\n    }\n\n    // Update last login\n    await prisma.user.update({\n      where: { id: user.id },\n      data: { lastLogin: new Date() },\n    })\n\n    // Generate JWT token\n    const token = generateToken({\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      department: user.department,\n    })\n\n    // Log activity\n    const ipAddress = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     'unknown'\n    const userAgent = request.headers.get('user-agent') || 'unknown'\n\n    await logActivity(\n      user.id,\n      'LOGIN',\n      'User',\n      user.id,\n      null,\n      null,\n      ipAddress,\n      userAgent\n    )\n\n    // Return user data (without password) and token\n    const { password: _, ...userWithoutPassword } = user\n\n    return NextResponse.json({\n      user: userWithoutPassword,\n      token,\n    })\n  } catch (error) {\n    console.error('Login error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;YAC3B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,IAAA,sIAAc,EAAC,UAAU,KAAK,QAAQ;QAEpE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,gIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE,IAAI,KAAK,EAAE;YAAC;YACrB,MAAM;gBAAE,WAAW,IAAI;YAAO;QAChC;QAEA,qBAAqB;QACrB,MAAM,QAAQ,IAAA,2IAAa,EAAC;YAC1B,IAAI,KAAK,EAAE;YACX,OAAO,KAAK,KAAK;YACjB,MAAM,KAAK,IAAI;YACf,YAAY,KAAK,UAAU;QAC7B;QAEA,eAAe;QACf,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,sBACrB,QAAQ,OAAO,CAAC,GAAG,CAAC,gBACpB;QACjB,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;QAEvD,MAAM,IAAA,oIAAW,EACf,KAAK,EAAE,EACP,SACA,QACA,KAAK,EAAE,EACP,MACA,MACA,WACA;QAGF,gDAAgD;QAChD,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}