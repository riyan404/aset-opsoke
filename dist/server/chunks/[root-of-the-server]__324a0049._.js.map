{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport jwt from 'jsonwebtoken'\n\nexport interface AuthenticatedRequest extends NextRequest {\n  user?: {\n    id: string\n    email: string\n    role: string\n    department?: string\n  }\n}\n\nexport function verifyToken(token: string) {\n  try {\n    return jwt.verify(token, process.env.JWT_SECRET!)\n  } catch (error) {\n    return null\n  }\n}\n\nexport function generateToken(payload: any) {\n  return jwt.sign(payload, process.env.JWT_SECRET!, { expiresIn: '1d' })\n}\n\nexport function withAuth(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n  return async (req: AuthenticatedRequest, context?: any) => {\n    const authHeader = req.headers.get('authorization')\n    console.log('Middleware: Authorization header:', authHeader)\n    \n    const token = authHeader?.replace('Bearer ', '')\n    console.log('Middleware: Extracted token:', token ? 'Token exists' : 'No token')\n    \n    if (!token) {\n      console.log('Middleware: No token provided')\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token) as any\n    console.log('Middleware: Token verification result:', decoded ? 'Valid' : 'Invalid')\n    \n    if (!decoded) {\n      console.log('Middleware: Invalid token')\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    req.user = decoded\n    return handler(req, context)\n  }\n}\n\nexport function withRole(roles: string[]) {\n  return function(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n    return withAuth(async (req: AuthenticatedRequest, context?: any) => {\n      if (!req.user || !roles.includes(req.user.role)) {\n        return NextResponse.json({ error: 'Forbidden' }, { status: 403 })\n      }\n      return handler(req, context)\n    })\n  }\n}"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAWO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,OAAO,kJAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU;IACjD,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,cAAc,OAAY;IACxC,OAAO,kJAAG,CAAC,IAAI,CAAC,SAAS,QAAQ,GAAG,CAAC,UAAU,EAAG;QAAE,WAAW;IAAK;AACtE;AAEO,SAAS,SAAS,OAA4E;IACnG,OAAO,OAAO,KAA2B;QACvC,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;QACnC,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,MAAM,QAAQ,YAAY,QAAQ,WAAW;QAC7C,QAAQ,GAAG,CAAC,gCAAgC,QAAQ,iBAAiB;QAErE,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAU,YAAY;QAC5B,QAAQ,GAAG,CAAC,0CAA0C,UAAU,UAAU;QAE1E,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,IAAI,IAAI,GAAG;QACX,OAAO,QAAQ,KAAK;IACtB;AACF;AAEO,SAAS,SAAS,KAAe;IACtC,OAAO,SAAS,OAA4E;QAC1F,OAAO,SAAS,OAAO,KAA2B;YAChD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG;gBAC/C,OAAO,gJAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAY,GAAG;oBAAE,QAAQ;gBAAI;YACjE;YACA,OAAO,QAAQ,KAAK;QACtB;IACF;AACF","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  // Memory optimization: Configure connection pooling\n  datasources: {\n    db: {\n      url: process.env.DATABASE_URL\n    }\n  },\n  // Reduce memory usage with optimized logging\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  // Connection pool optimization for memory efficiency\n  __internal: {\n    engine: {\n      // Limit connection pool size to reduce memory usage\n      connectionLimit: 5,\n    }\n  }\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY,CAAC;IAC/D,oDAAoD;IACpD,aAAa;QACX,IAAI;YACF,KAAK,QAAQ,GAAG,CAAC,YAAY;QAC/B;IACF;IACA,6CAA6C;IAC7C,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO,GAAG;IAC3E,qDAAqD;IACrD,YAAY;QACV,QAAQ;YACN,oDAAoD;YACpD,iBAAiB;QACnB;IACF;AACF;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///home/riyan404/aset-opsoke/src/app/api/dashboard/stats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { verifyToken } from '@/lib/middleware'\nimport { prisma } from '@/lib/prisma'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    const decoded = verifyToken(token) as any\n    if (!decoded) {\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      )\n    }\n\n    const user = decoded\n\n    // Get basic counts\n    const [\n      totalAssets,\n      activeAssets,\n      totalDocuments,\n      activeDocuments,\n      totalDigitalAssets,\n      activeDigitalAssets,\n      totalUsers,\n      activeUsers,\n      recentAuditActivities\n    ] = await Promise.all([\n      prisma.asset.count({\n        where: user.role === 'ADMIN' ? {} : { department: user.department }\n      }),\n      prisma.asset.count({\n        where: {\n          isActive: true,\n          ...(user.role === 'ADMIN' ? {} : { department: user.department })\n        }\n      }),\n      prisma.document.count({\n        where: user.role === 'ADMIN' ? {} : { department: user.department }\n      }),\n      prisma.document.count({\n        where: {\n          isActive: true,\n          ...(user.role === 'ADMIN' ? {} : { department: user.department })\n        }\n      }),\n      prisma.digitalAsset.count({\n        where: user.role === 'ADMIN' ? {} : { department: user.department }\n      }),\n      prisma.digitalAsset.count({\n        where: {\n          isActive: true,\n          ...(user.role === 'ADMIN' ? {} : { department: user.department })\n        }\n      }),\n      user.role === 'ADMIN' ? prisma.user.count() : 0,\n      user.role === 'ADMIN' ? prisma.user.count({ where: { isActive: true } }) : 0,\n      user.role === 'ADMIN' ? prisma.auditLog.count({\n        where: {\n          timestamp: {\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n          }\n        }\n      }) : 0\n    ])\n\n    // Get assets by category\n    const assetsByCategory = await prisma.asset.groupBy({\n      by: ['category'],\n      _count: { id: true },\n      where: {\n        isActive: true,\n        ...(user.role === 'ADMIN' ? {} : { department: user.department })\n      }\n    })\n\n    // Get documents over last 6 months\n    const sixMonthsAgo = new Date()\n    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6)\n\n    const documentsOverTime = await prisma.document.findMany({\n      where: {\n        createdAt: {\n          gte: sixMonthsAgo\n        },\n        ...(user.role === 'ADMIN' ? {} : { department: user.department })\n      },\n      select: {\n        createdAt: true\n      }\n    })\n\n    // Process documents over time data\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    const documentsTimeData = Array.from({ length: 6 }, (_, i) => {\n      const date = new Date()\n      date.setMonth(date.getMonth() - (5 - i))\n      const monthName = monthNames[date.getMonth()]\n      \n      const count = documentsOverTime.filter(doc => {\n        const docDate = new Date(doc.createdAt)\n        return docDate.getMonth() === date.getMonth() && docDate.getFullYear() === date.getFullYear()\n      }).length\n      \n      return { month: monthName, count }\n    })\n\n    // Get recent audit activities for admin\n    let recentAuditActivitiesData: Array<{ date: string; action: string; resource: string; count: number }> = []\n    if (user.role === 'ADMIN') {\n      const auditLogs = await prisma.auditLog.findMany({\n        where: {\n          timestamp: {\n            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days\n          }\n        },\n        orderBy: {\n          timestamp: 'desc'\n        },\n        take: 50\n      })\n\n      // Process audit data by day\n      const dayNames = ['Today', 'Yesterday', '2 days ago', '3 days ago', '4 days ago', '5 days ago', '6 days ago']\n      recentAuditActivitiesData = dayNames.map((dayName, index) => {\n        const targetDate = new Date()\n        targetDate.setDate(targetDate.getDate() - index)\n        targetDate.setHours(0, 0, 0, 0)\n        \n        const nextDay = new Date(targetDate)\n        nextDay.setDate(nextDay.getDate() + 1)\n        \n        const dayLogs = auditLogs.filter(log => {\n          const logDate = new Date(log.timestamp)\n          return logDate >= targetDate && logDate < nextDay\n        })\n        \n        const totalCount = dayLogs.length\n        \n        return {\n          date: dayName,\n          action: 'ALL',\n          resource: 'System',\n          count: totalCount\n        }\n      }).filter(item => item.count > 0)\n    }\n\n    // Format assets by category data\n    const categoryColors = {\n      'Computer & IT': '#187F7E',\n      'Furniture': '#00AAA8',\n      'Equipment': '#0EB6B4',\n      'Vehicle': '#D4AF37',\n      'Office Supplies': '#E8E8E8',\n      'Others': '#6B7280'\n    }\n\n    const assetsCategoryData = assetsByCategory.map(category => ({\n      name: category.category || 'Others',\n      count: category._count.id,\n      color: categoryColors[category.category as keyof typeof categoryColors] || '#6B7280'\n    }))\n\n    // Get digital assets by aspect ratio\n    const digitalAssetsByAspectRatio = await prisma.digitalAsset.groupBy({\n      by: ['aspectRatio'],\n      _count: { id: true },\n      where: {\n        isActive: true,\n        ...(user.role === 'ADMIN' ? {} : { department: user.department })\n      }\n    })\n\n    // Format digital assets by aspect ratio data\n    const aspectRatioColors = {\n      'RATIO_4_3': '#187F7E',\n      'RATIO_9_16': '#00AAA8'\n    }\n\n    const digitalAssetsAspectRatioData = digitalAssetsByAspectRatio.map(item => ({\n      name: item.aspectRatio === 'RATIO_4_3' ? '4:3' : '9:16',\n      count: item._count.id,\n      color: aspectRatioColors[item.aspectRatio as keyof typeof aspectRatioColors] || '#6B7280'\n    }))\n\n    const stats = {\n    totalAssets,\n    activeAssets,\n    totalDocuments,\n    activeDocuments,\n    totalDigitalAssets,\n    activeDigitalAssets,\n    totalUsers,\n    activeUsers,\n    recentActivities: recentAuditActivities,\n    assetsByCategory: assetsCategoryData,\n    documentsOverTime: documentsTimeData,\n    recentAuditActivities: recentAuditActivitiesData,\n    digitalAssetsByAspectRatio: digitalAssetsAspectRatioData\n  }\n\n    return NextResponse.json(stats)\n  } catch (error) {\n    console.error('Dashboard stats error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}