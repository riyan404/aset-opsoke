{"version":3,"sources":["turbopack:///[project]/src/lib/middleware.ts","turbopack:///[project]/src/lib/permissions.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport jwt from 'jsonwebtoken'\n\nexport interface AuthenticatedRequest extends NextRequest {\n  user?: {\n    id: string\n    email: string\n    role: string\n    department?: string\n  }\n}\n\nexport function verifyToken(token: string) {\n  try {\n    return jwt.verify(token, process.env.JWT_SECRET!)\n  } catch (error) {\n    return null\n  }\n}\n\nexport function generateToken(payload: any) {\n  return jwt.sign(payload, process.env.JWT_SECRET!, { expiresIn: '1d' })\n}\n\nexport function withAuth(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n  return async (req: AuthenticatedRequest, context?: any) => {\n    const authHeader = req.headers.get('authorization')\n    console.log('Middleware: Authorization header:', authHeader)\n    \n    const token = authHeader?.replace('Bearer ', '')\n    console.log('Middleware: Extracted token:', token ? 'Token exists' : 'No token')\n    \n    if (!token) {\n      console.log('Middleware: No token provided')\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token) as any\n    console.log('Middleware: Token verification result:', decoded ? 'Valid' : 'Invalid')\n    \n    if (!decoded) {\n      console.log('Middleware: Invalid token')\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    req.user = decoded\n    return handler(req, context)\n  }\n}\n\nexport function withRole(roles: string[]) {\n  return function(handler: (req: AuthenticatedRequest, context?: any) => Promise<NextResponse>) {\n    return withAuth(async (req: AuthenticatedRequest, context?: any) => {\n      if (!req.user || !roles.includes(req.user.role)) {\n        return NextResponse.json({ error: 'Forbidden' }, { status: 403 })\n      }\n      return handler(req, context)\n    })\n  }\n}","import { PrismaClient } from '@prisma/client'\nimport { CacheManager } from './cache'\n\nconst prisma = new PrismaClient()\n\nexport interface PermissionCheck {\n  canRead: boolean\n  canWrite: boolean\n  canDelete: boolean\n}\n\n/**\n * Check if a user has specific permissions for a module\n * @param userDepartment - User's department\n * @param userRole - User's role (ADMIN, USER, VIEWER)\n * @param module - System module to check (ASSETS, DOCUMENTS, DIGITAL_ASSETS, etc.)\n * @returns Permission object with read, write, delete flags\n */\nexport async function checkUserPermissions(\n  userDepartment: string | null,\n  userRole: string,\n  module: string\n): Promise<PermissionCheck> {\n  try {\n    // Admin has full access to everything\n    if (userRole === 'ADMIN') {\n      return {\n        canRead: true,\n        canWrite: true,\n        canDelete: true\n      }\n    }\n\n    // Users without department have limited access\n    if (!userDepartment) {\n      return {\n        canRead: true,\n        canWrite: false,\n        canDelete: false\n      }\n    }\n\n    // Temporarily disable cache to fix hang issue\n    // const cacheKey = CacheManager.generatePermissionKey(userDepartment, userRole, module)\n    // const cachedPermission = CacheManager.getPermissions(cacheKey)\n    \n    // if (cachedPermission) {\n    //   return cachedPermission\n    // }\n\n    // Get department permissions from database with timeout\n    const permissionPromise = prisma.departmentPermission.findFirst({\n      where: {\n        department: userDepartment,\n        module: module as any,\n        isActive: true\n      }\n    })\n\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Database query timeout')), 3000)\n    )\n\n    const permission = await Promise.race([permissionPromise, timeoutPromise]) as any\n\n    let result: PermissionCheck\n\n    if (!permission) {\n      // Default permissions if no specific permission is set\n      result = {\n        canRead: true, // Default read access\n        canWrite: false,\n        canDelete: false\n      }\n    } else {\n      result = {\n        canRead: permission.canRead,\n        canWrite: permission.canWrite,\n        canDelete: permission.canDelete\n      }\n    }\n\n    // Cache the result (temporarily disabled)\n    // CacheManager.setPermissions(cacheKey, result)\n\n    return result\n  } catch (error) {\n    console.error('Error checking user permissions:', error)\n    // Default to safe permissions on error\n    return {\n      canRead: true,\n      canWrite: false,\n      canDelete: false\n    }\n  }\n}\n\n/**\n * Check if user can read a specific module\n */\nexport async function canUserRead(userDepartment: string | null, userRole: string, module: string): Promise<boolean> {\n  const permissions = await checkUserPermissions(userDepartment, userRole, module)\n  return permissions.canRead\n}\n\n/**\n * Check if user can write/edit in a specific module\n */\nexport async function canUserWrite(userDepartment: string | null, userRole: string, module: string): Promise<boolean> {\n  const permissions = await checkUserPermissions(userDepartment, userRole, module)\n  return permissions.canWrite\n}\n\n/**\n * Check if user can delete in a specific module\n */\nexport async function canUserDelete(userDepartment: string | null, userRole: string, module: string): Promise<boolean> {\n  const permissions = await checkUserPermissions(userDepartment, userRole, module)\n  return permissions.canDelete\n}\n\n/**\n * Get all permissions for a department\n */\nexport async function getDepartmentPermissions(department: string) {\n  try {\n    const permissions = await prisma.departmentPermission.findMany({\n      where: {\n        department,\n        isActive: true\n      },\n      orderBy: {\n        module: 'asc'\n      }\n    })\n\n    // Convert to a map for easy lookup\n    const permissionMap: { [key: string]: PermissionCheck } = {}\n    permissions.forEach(perm => {\n      permissionMap[perm.module] = {\n        canRead: perm.canRead,\n        canWrite: perm.canWrite,\n        canDelete: perm.canDelete\n      }\n    })\n\n    return permissionMap\n  } catch (error) {\n    console.error('Error getting department permissions:', error)\n    return {}\n  }\n}\n\n/**\n * Create middleware function for API route protection\n */\nexport function withPermissionCheck(requiredModule: string, requiredAction: 'read' | 'write' | 'delete') {\n  return function (handler: Function) {\n    return async function (request: any, context?: any) {\n      try {\n        // Extract user from request (assuming JWT verification is done)\n        const user = (request as any).user\n        \n        if (!user) {\n          return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n            status: 401,\n            headers: { 'Content-Type': 'application/json' }\n          })\n        }\n\n        // Check permissions\n        const permissions = await checkUserPermissions(user.department, user.role, requiredModule)\n        \n        let hasPermission = false\n        switch (requiredAction) {\n          case 'read':\n            hasPermission = permissions.canRead\n            break\n          case 'write':\n            hasPermission = permissions.canWrite\n            break\n          case 'delete':\n            hasPermission = permissions.canDelete\n            break\n        }\n\n        if (!hasPermission) {\n          return new Response(JSON.stringify({ error: 'Insufficient permissions' }), {\n            status: 403,\n            headers: { 'Content-Type': 'application/json' }\n          })\n        }\n\n        // Call the original handler\n        return await handler(request, context)\n      } catch (error) {\n        console.error('Permission check error:', error)\n        return new Response(JSON.stringify({ error: 'Internal server error' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n    }\n  }\n}\n\n/**\n * System modules constants\n */\nexport const SYSTEM_MODULES = {\n  ASSETS: 'ASSETS',\n  DOCUMENTS: 'DOCUMENTS',\n  DIGITAL_ASSETS: 'DIGITAL_ASSETS',\n  USERS: 'USERS',\n  AUDIT_LOGS: 'AUDIT_LOGS',\n  REPORTS: 'REPORTS',\n  SETTINGS: 'SETTINGS'\n} as const"],"names":[],"mappings":"0iDAAA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAWO,SAAS,EAAY,CAAa,EACvC,GAAI,CACF,OAAO,EAAA,OAAG,CAAC,MAAM,CAAC,EAAO,QAAQ,GAAG,CAAC,UAAU,CACjD,CAAE,MAAO,EAAO,CACd,OAAO,IACT,CACF,CAEO,SAAS,EAAc,CAAY,EACxC,OAAO,EAAA,OAAG,CAAC,IAAI,CAAC,EAAS,QAAQ,GAAG,CAAC,UAAU,CAAG,CAAE,UAAW,IAAK,EACtE,CAEO,SAAS,EAAS,CAA4E,EACnG,OAAO,MAAO,EAA2B,KACvC,IAAM,EAAa,EAAI,OAAO,CAAC,GAAG,CAAC,iBACnC,QAAQ,GAAG,CAAC,oCAAqC,GAEjD,IAAM,EAAQ,GAAY,QAAQ,UAAW,IAG7C,GAFA,QAAQ,GAAG,CAAC,+BAAgC,EAAQ,eAAiB,YAEjE,CAAC,EAEH,KAFU,EACV,QAAQ,GAAG,CAAC,iCACL,EAAA,YAAY,CAAC,IAAI,CAAC,CAAE,MAAO,cAAe,EAAG,CAAE,OAAQ,GAAI,GAGpE,IAAM,EAAU,EAAY,SAG5B,CAFA,GAEI,KAFI,GAAG,CAAC,yCAA0C,EAAU,QAAU,WAErE,IAKL,EAAI,GALU,CAKN,CAAG,EACJ,EAAQ,EAAK,KALlB,QAAQ,GAAG,CAAC,6BACL,EAAA,YAAY,CAAC,IAAI,CAAC,CAAE,MAAO,eAAgB,EAAG,CAAE,OAAQ,GAAI,GAKvE,CACF,CAEO,SAAS,EAAS,CAAe,EACtC,OAAO,SAAS,CAA4E,EAC1F,OAAO,EAAS,MAAO,EAA2B,IAChD,AAAI,AAAC,EAAI,IAAI,EAAK,EAAD,AAAO,QAAQ,CAAC,EAAI,IAAI,CAAC,IAAI,EAGvC,CAH0C,CAGlC,EAAK,GAFX,EAAA,YAAY,CAAC,IAAI,CAAC,CAAE,MAAO,WAAY,EAAG,CAAE,OAAQ,GAAI,GAIrE,CACF,qFCxDA,IAAM,EAAS,GAHf,AAGmB,CAHnB,EAAA,CAAA,CAAA,MAAA,EAGmB,YAAY,CAexB,eAAe,EACpB,CAA6B,CAC7B,CAAgB,CAChB,CAAc,EAEd,GAAI,CAEF,GAAiB,SAAS,CAAtB,EACF,MAAO,CACL,SAAS,EACT,UAAU,EACV,WAAW,CACb,EAIF,GAAI,CAAC,EACH,MAAO,CACL,OAFiB,EAER,EACT,UAAU,EACV,WAAW,CACb,EAYF,IAAM,EAAoB,EAAO,oBAAoB,CAAC,SAAS,CAAC,CAC9D,MAAO,CACL,WAAY,EACZ,OAAQ,EACR,UAAU,CACZ,CACF,GAEM,EAAiB,IAAI,QAAQ,CAAC,EAAG,IACrC,WAAW,IAAM,EAAW,AAAJ,MAAU,2BAA4B,MAG1D,EAAa,MAAM,QAAQ,IAAI,CAAC,CAAC,EAAmB,EAAe,EAsBzE,OAlBK,AAkBE,EAVI,CACP,QAAS,CATI,CASO,OAAO,CAC3B,SAAU,EAAW,QAAQ,CAC7B,UAAW,EAAW,SACxB,AADiC,EATxB,CACP,SAAS,EACT,UAAU,EACV,WAAW,CACb,CAaJ,CAAE,MAAO,EAAO,CAGd,OAFA,QAAQ,KAAK,CAAC,mCAAoC,GAE3C,CACL,SAAS,EACT,UAAU,EACV,UAAW,EACb,CACF,CACF,CAkHO,IAAM,EAAiB,CAC5B,OAAQ,SACR,UAAW,YACX,eAAgB,iBAChB,MAAO,QACP,WAAY,aACZ,QAAS,UACT,SAAU,UACZ"}