
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  department: 'department',
  position: 'position'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  subcategory: 'subcategory',
  brand: 'brand',
  model: 'model',
  serialNumber: 'serialNumber',
  purchaseDate: 'purchaseDate',
  purchasePrice: 'purchasePrice',
  currentValue: 'currentValue',
  condition: 'condition',
  location: 'location',
  department: 'department',
  assignedTo: 'assignedTo',
  warrantyUntil: 'warrantyUntil',
  notes: 'notes',
  tags: 'tags',
  barcode: 'barcode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  type: 'type',
  description: 'description',
  scheduledDate: 'scheduledDate',
  completedDate: 'completedDate',
  cost: 'cost',
  vendor: 'vendor',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetAuditScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  auditDate: 'auditDate',
  condition: 'condition',
  location: 'location',
  notes: 'notes',
  auditorId: 'auditorId',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  subcategory: 'subcategory',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  version: 'version',
  tags: 'tags',
  isActive: 'isActive',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  department: 'department',
  watermark: 'watermark'
};

exports.Prisma.DocumentApprovalScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  approverId: 'approverId',
  status: 'status',
  comments: 'comments',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentRevisionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  version: 'version',
  changes: 'changes',
  filePath: 'filePath',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AutoBackupConfigScalarFieldEnum = {
  id: 'id',
  isEnabled: 'isEnabled',
  scheduleTime: 'scheduleTime',
  retentionDays: 'retentionDays',
  lastRunAt: 'lastRunAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.WatermarkConfigScalarFieldEnum = {
  id: 'id',
  department: 'department',
  text: 'text',
  opacity: 'opacity',
  position: 'position',
  fontSize: 'fontSize',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.DigitalAssetScalarFieldEnum = {
  id: 'id',
  contentName: 'contentName',
  description: 'description',
  aspectRatio: 'aspectRatio',
  googleDriveLink: 'googleDriveLink',
  previewFile: 'previewFile',
  previewFileName: 'previewFileName',
  previewFileSize: 'previewFileSize',
  tags: 'tags',
  department: 'department',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ArchiveReportScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  department: 'department',
  action: 'action',
  performedBy: 'performedBy',
  reason: 'reason',
  notes: 'notes',
  timestamp: 'timestamp'
};

exports.Prisma.DepartmentPermissionScalarFieldEnum = {
  id: 'id',
  department: 'department',
  module: 'module',
  canRead: 'canRead',
  canWrite: 'canWrite',
  canDelete: 'canDelete',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  VIEWER: 'VIEWER'
};

exports.UserPosition = exports.$Enums.UserPosition = {
  MANAGER: 'MANAGER',
  STAFF: 'STAFF'
};

exports.AssetCondition = exports.$Enums.AssetCondition = {
  EXCELLENT: 'EXCELLENT',
  GOOD: 'GOOD',
  FAIR: 'FAIR',
  POOR: 'POOR',
  DAMAGED: 'DAMAGED',
  DISPOSED: 'DISPOSED'
};

exports.MaintenanceType = exports.$Enums.MaintenanceType = {
  PREVENTIVE: 'PREVENTIVE',
  CORRECTIVE: 'CORRECTIVE',
  PREDICTIVE: 'PREDICTIVE',
  EMERGENCY: 'EMERGENCY'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  OVERDUE: 'OVERDUE'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.CategoryType = exports.$Enums.CategoryType = {
  ASSET: 'ASSET',
  DOCUMENT: 'DOCUMENT',
  DEPARTMENT: 'DEPARTMENT'
};

exports.DigitalAssetRatio = exports.$Enums.DigitalAssetRatio = {
  RATIO_4_3: 'RATIO_4_3',
  RATIO_9_16: 'RATIO_9_16'
};

exports.ArchiveAction = exports.$Enums.ArchiveAction = {
  IN: 'IN',
  OUT: 'OUT',
  UPDATED: 'UPDATED',
  DELETED: 'DELETED',
  VIEWED: 'VIEWED',
  SHARED: 'SHARED'
};

exports.SystemModule = exports.$Enums.SystemModule = {
  ASSETS: 'ASSETS',
  DOCUMENTS: 'DOCUMENTS',
  DIGITAL_ASSETS: 'DIGITAL_ASSETS',
  USERS: 'USERS',
  AUDIT_LOGS: 'AUDIT_LOGS',
  REPORTS: 'REPORTS',
  SETTINGS: 'SETTINGS'
};

exports.Prisma.ModelName = {
  User: 'User',
  Asset: 'Asset',
  Maintenance: 'Maintenance',
  AssetAudit: 'AssetAudit',
  Document: 'Document',
  DocumentApproval: 'DocumentApproval',
  DocumentRevision: 'DocumentRevision',
  AuditLog: 'AuditLog',
  SystemSetting: 'SystemSetting',
  AutoBackupConfig: 'AutoBackupConfig',
  Category: 'Category',
  WatermarkConfig: 'WatermarkConfig',
  DigitalAsset: 'DigitalAsset',
  ArchiveReport: 'ArchiveReport',
  DepartmentPermission: 'DepartmentPermission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
